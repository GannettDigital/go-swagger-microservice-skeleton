build:
  install:
    image: $$DOCKER_REG/golang/debian
    commands:
      - make drone-install
    when:
      branch: ["master"]

  bundle:
    image: $$DOCKER_REG/golang/debian
    commands:
      - go build
      - go build -o {NAME}-$$BRANCH
    when:
      branch: ["master"]
      success: true   

  tag-prod:
    image: $$DOCKER_REG/drone/bumpit
    pull: true
    environment:
      DRONE_DSN: $$DRONE_DSN
      BUMPIT_ADD_BUILD_TAG: true
      BUMPIT_BUMPIT: false
      BUMPIT_RELEASE: false
    commands:
      - /opt/entrypoint.sh
    when:
      branch: "master"
      success: true

  artifacts:
    image: $$DOCKER_REG/golang/debian
    commands:
      - tar -cvzf {NAME}.tar.gz {NAME}
      - curl -H  "X-JFrog-Art-Api:$$ARTIFACTORY_API"  -X PUT "http://artifactory.gannettdigital.com/artifactory/go-repository/{NAME}/{NAME}-$(jq -r .versionWithBuild version.json).tar.gz;version=$(jq -r .versionWithBuild version.json);applicationName={NAME}" -T {NAME}.tar.gz  || exit 1
      - tar -cvzf {NAME}-static.tar.gz templates
      - curl --fail -H  "X-JFrog-Art-Api:$$ARTIFACTORY_API"  -X PUT "http://artifactory.gannettdigital.com/artifactory/go-repository/{NAME}/{NAME}-static-$(jq -r .versionWithBuild version.json).tar.gz;version=$(jq -r .versionWithBuild version.json);applicationName={NAME}-static" -T {NAME}-static.tar.gz  || exit 1
    when:
      branch: ["master"]
      success: true   

  build-docker-paas-centos:
    image: $$DOCKER_REG/docker/buildpack-deps
    pull: true
    privileged: true
    environment:
      DOCKER_HOST: 127.0.0.1
    volumes:
      - /opt/gannett/drone-docker-cache:/opt/gannett/drone-docker-cache
    commands:
      - if [ ! -d /opt/gannett/drone-docker-cache/${DRONE_REPO} ]; then mkdir -p /opt/gannett/drone-docker-cache/${DRONE_REPO}; fi
      - if [ -f /opt/gannett/drone-docker-cache/${DRONE_REPO}/${DRONE_BRANCH}.tar.gz ]; then docker load --quiet --input /opt/gannett/drone-docker-cache/${DRONE_REPO}/${DRONE_BRANCH}.tar.gz; fi
      - docker login --username $$DOCKER_REG_USER --password "$$DOCKER_REG_PWD" $$DOCKER_REG
      - docker build --pull --build-arg BRANCH=$$BRANCH --file ./docker/paas-centos/Dockerfile --tag "$$DOCKER_REG/{NAME}/$$BRANCH:latest" --tag "$$DOCKER_REG/{NAME}:$(jq -r .versionWithoutBuild version.json)-$$BRANCH-$$BUILD_NUMBER" .
      - docker push $$DOCKER_REG/{NAME}/$$BRANCH:latest
      - docker push $$DOCKER_REG/{NAME}:$(jq -r .versionWithoutBuild version.json)-$$BRANCH-$$BUILD_NUMBER
      - docker save -o /opt/gannett/drone-docker-cache/${DRONE_REPO}/${DRONE_BRANCH}.tar.gz $$DOCKER_REG/{NAME}/$$BRANCH:latest paas-docker-artifactory.gannettdigital.com/paas-centos7-base:latest
    when:
      branch: "master"
      success: true


  scalr-vars:
    image: $$DOCKER_REG/golang/debian
    commands:
      - git clone https://github.com/GannettDigital/drone-scalr.git
      - make -C ./drone-scalr checkout
      - make -C ./drone-scalr install
      - "export SCALR_GLOBAL_VARS=\"APP_VERSION=$(jq -r .versionWithBuild version.json) STATIC_VERSION=$(jq -r .versionWithBuild version.json)\" && make -C ./drone-scalr update-vars"
      - rm -r ./drone-scalr
    environment:
      SCALR_API_KEY: $$SCALR_API_KEY
      SCALR_SECRET_KEY: $$SCALR_SECRET_KEY
      SCALR_ENV: "Gannett Digital Production"
      SCALR_FARM: "{NAME}"
      SCALR_FARM_ROLE: "{NAME}-go"
      SCALR_HERD_01: '["{NAME}-east","{NAME}-west"]'
      SCALR_APP_VERSION_NAME: "APP_VERSION"
    when:
      branch: "master"
      success: true

  # scalr-deploy:
  #   image: $$DOCKER_REG/drone/deploy
  #   pull: true
  #   commands:
  #     - drone-deploy --config ./.deployment.$$BRANCH.json deploy --new-version $(jq -r .versionWithBuild version.json)
  #   environment:
  #     DEPLOY_SCALR_API_ACCESS: $$SCALR_V2_API_KEY
  #     DEPLOY_SCALR_API_SECRET: $$SCALR_V2_SECRET_KEY
  #     DEPLOY_API_KEY: $$TYK_API_KEY
  #   when:
  #     branch: ["master"]
  #     success: true

  docker-deploy:
    image: $$DOCKER_REG/drone/deploy
    pull: true
    commands:
      - export GLOBAL_SCALR_ENVIRONMENT=$(jq -r .[].deployments[0].input.scalr.farm.environment .deployment.docker.$$BRANCH.json)
      - export DEPLOY_IMAGE_NAME=$$DOCKER_REG/{NAME}:$(jq -r .versionWithoutBuild version.json)-$$BRANCH-$$BUILD_NUMBER
      - drone-deploy --polling-period 20s --config ./.deployment.docker.$$BRANCH.json deploy --new-version $(jq -r .versionWithBuild version.json)
    environment:
      DEPLOY_SCALR_API_ACCESS: $$SCALR_V2_API_KEY
      DEPLOY_SCALR_API_SECRET: $$SCALR_V2_SECRET_KEY
      DEPLOY_API_KEY: $$TYK_API_KEY
      DEPLOY_DOCKER: "true"
      DEPLOY_KUBE_API_USER: "derp"
      DEPLOY_KUBE_API_TOKEN: "derp"
      DEPLOY_NEWRELIC_KEY: $$NEWRELIC_LICENSE_KEY
      DEPLOY_DATADOG_API_KEY: $$DATADOG_API_KEY
    when:
      branch: ["master", "dev"]
      success: true

compose:
  #Service container for building Docker images
  dind:
    image: docker:1.12-dind
    privileged: true

notify:
  slack:
    webhook_url: https://hooks.slack.com/services/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
    channel: drone
    username: drone
    when: 
      success: false
      event: pull_request
    template: >
        Fail: Build of <http://1347-5315-scalr.tools.gannettdigital.com/{{repo.owner}}/{{repo.name}}/{{build.number}}|{{build.branch}}> by <{{build.link_url}}|{{build.author}}> for <{{repo.link_url}}|{{repo.owner}}/{{repo.name}}> :skull:
  slack:
    webhook_url: https://hooks.slack.com/services/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
    channel: drone
    username: drone
    when: 
      success: false
      branch: ["master", "dev", "preprod"]     
    template: >
        Fail: Build of <http://1347-5315-scalr.tools.gannettdigital.com/{{repo.owner}}/{{repo.name}}/{{build.number}}|{{build.branch}}> by <{{build.link_url}}|{{build.author}}> for <{{repo.link_url}}|{{repo.owner}}/{{repo.name}}> :skull:
